     1                                  ;Test routine for GetPut.asm     test.asm 
     2                                  ;
     3                                  ;       Objective: find the sum of two numbers 
     4                                  ;       Input: Requests two  integers  from the user.
     5                                  ;       Output: Outputs the input number.
     6                                  %include "io.mac"
     7                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     8                              <1> extern   proc_GetStr, proc_GetCh
     9                              <1> extern   proc_PutInt, proc_GetInt
    10                              <1> extern   proc_PutLInt, proc_GetLInt
    11                              <1> 
    12                              <1> ;;-------------------------------------------------------------------
    13                              <1> %macro  .STARTUP  0
    14                              <1> ;group dgroup .data .bss
    15                              <1>         global   _start
    16                              <1> _start:
    17                              <1> %endmacro
    18                              <1> ;;-------------------------------------------------------------------
    19                              <1> 
    20                              <1> 
    21                              <1> ;;-------------------------------------------------------------------
    22                              <1> %macro  .EXIT  0
    23                              <1>         mov    EAX,1
    24                              <1>         xor    EBX,EBX
    25                              <1>         int    0x80
    26                              <1> %endmacro
    27                              <1> ;;-------------------------------------------------------------------
    28                              <1> 
    29                              <1> 
    30                              <1> ;;-------------------------------------------------------------------
    31                              <1> %macro  .DATA 0
    32                              <1>         segment .data
    33                              <1> %endmacro
    34                              <1> ;;-------------------------------------------------------------------
    35                              <1> 
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> %macro  .UDATA 0
    38                              <1>         segment .bss
    39                              <1> %endmacro
    40                              <1> ;;-------------------------------------------------------------------
    41                              <1> 
    42                              <1> ;;-------------------------------------------------------------------
    43                              <1> %macro  .CODE 0
    44                              <1>         segment .data
    45                              <1>         segment .bss
    46                              <1>         segment .text
    47                              <1> %endmacro
    48                              <1> ;;-------------------------------------------------------------------
    49                              <1> 
    50                              <1> 
    51                              <1> ;;-------------------------------------------------------------------
    52                              <1> %macro  nwln  0 
    53                              <1>         call    proc_nwln
    54                              <1> %endmacro
    55                              <1> ;;-------------------------------------------------------------------
    56                              <1> 
    57                              <1> 
    58                              <1> ;;-------------------------------------------------------------------
    59                              <1> %macro  PutCh  1 
    60                              <1>         push    AX
    61                              <1>         mov     AL,%1
    62                              <1>         call    proc_PutCh
    63                              <1>         pop     AX
    64                              <1> %endmacro
    65                              <1> ;;-------------------------------------------------------------------
    66                              <1> 
    67                              <1> 
    68                              <1> ;;-------------------------------------------------------------------
    69                              <1> %macro  PutStr  1 
    70                              <1>         push    ECX
    71                              <1>         mov     ECX,%1
    72                              <1>         call    proc_PutStr
    73                              <1>         pop     ECX
    74                              <1> %endmacro
    75                              <1> ;;-------------------------------------------------------------------
    76                              <1> 
    77                              <1> 
    78                              <1> ;;-------------------------------------------------------------------
    79                              <1> %macro  GetStr  1-2 81
    80                              <1>         push    ESI
    81                              <1>         push    EDI
    82                              <1>         mov     EDI,%1
    83                              <1>         mov     ESI,%2
    84                              <1>         call    proc_GetStr
    85                              <1>         pop     EDI
    86                              <1>         pop     ESI
    87                              <1> %endmacro
    88                              <1> ;;-------------------------------------------------------------------
    89                              <1> 
    90                              <1> 
    91                              <1> ;;-------------------------------------------------------------------
    92                              <1> %macro  GetCh   1
    93                              <1>         push    SI
    94                              <1>         xor     SI,SI
    95                              <1> %ifidni %1,AL
    96                              <1>         ;inc     SI
    97                              <1>         call    proc_GetCh
    98                              <1> %elifidni %1,AH
    99                              <1>         mov     SI,1
   100                              <1>         call    proc_GetCh
   101                              <1> %else
   102                              <1>         push    AX
   103                              <1>         call    proc_GetCh
   104                              <1>         mov     %1,AL
   105                              <1>         pop     AX
   106                              <1> %endif
   107                              <1>         pop     SI
   108                              <1> %endmacro
   109                              <1> ;;-------------------------------------------------------------------
   110                              <1> 
   111                              <1> 
   112                              <1> ;;-------------------------------------------------------------------
   113                              <1> %macro  PutInt  1
   114                              <1>         push    AX
   115                              <1>         mov     AX,%1
   116                              <1>         call    proc_PutInt
   117                              <1>         pop     AX
   118                              <1> %endmacro
   119                              <1> ;;-------------------------------------------------------------------
   120                              <1> 
   121                              <1> 
   122                              <1> ;;-------------------------------------------------------------------
   123                              <1> %macro  GetInt  1
   124                              <1> %ifnidni %1,AX
   125                              <1>         push    AX
   126                              <1>         call    proc_GetInt
   127                              <1>         mov     %1,AX
   128                              <1> 	  pop     AX
   129                              <1> %else 
   130                              <1>         call  proc_GetInt
   131                              <1> %endif
   132                              <1> %endmacro
   133                              <1> ;;-------------------------------------------------------------------
   134                              <1> 
   135                              <1> ;;-------------------------------------------------------------------
   136                              <1> %macro  PutLInt  1
   137                              <1>         push    EAX
   138                              <1>         mov     EAX,%1
   139                              <1>         call    proc_PutLInt
   140                              <1>         pop     EAX
   141                              <1> %endmacro
   142                              <1> ;;-------------------------------------------------------------------
   143                              <1> 
   144                              <1> ;;-------------------------------------------------------------------
   145                              <1> %macro  GetLInt  1
   146                              <1> %ifnidni %1,EAX
   147                              <1>         push    EAX
   148                              <1>         call    proc_GetLInt
   149                              <1>         mov     %1,EAX
   150                              <1> 	  pop     EAX
   151                              <1> %else 
   152                              <1>         call  proc_GetLInt
   153                              <1> %endif
   154                              <1> %endmacro
   155                              <1> ;;-------------------------------------------------------------------
   156                              <1> 
   157                                  
   158                                  .DATA
   159                              <1>  segment .data
   160 00000000 506C6561736520696E-     prompt_msg1  db   "Please input the first number : ",0
   161 00000009 707574207468652066-
   162 00000012 69727374206E756D62-
   163 0000001B 6572203A2000       
   164 00000021 506C6561736520696E-     prompt_msg2  db   "Please input the second  number : ",0
   165 0000002A 707574207468652073-
   166 00000033 65636F6E6420206E75-
   167 0000003C 6D626572203A2000   
   168 00000044 5468652073756D2069-     output_msg  db   "The sum is :",0
   169 0000004D 73203A00           
   170 00000051 4762                    n1          dw      25159
   171 00000053 D309                    n2          dw      2515
   172                                  .UDATA 
   173                              <1>  segment .bss
   174 00000000 <res 00000004>          number1   resd   1 
   175 00000004 <res 00000004>          number2   resd   1
   176                                  
   177                                  .CODE
   178                              <1>  segment .data
   179                              <1>  segment .bss
   180                              <1>  segment .text
   181                                        .STARTUP
   182                              <1> 
   183                              <1>  global _start
   184                              <1> _start:
   185                                        PutStr  prompt_msg1   ; request first number 
   186 00000000 51                  <1>  push ECX
   187 00000001 B9[00000000]        <1>  mov ECX,%1
   188 00000006 E8(00000000)        <1>  call proc_PutStr
   189 0000000B 59                  <1>  pop ECX
   190                                        GetInt CX             ; CX= first number  
   191                              <1> %ifnidni %1,AX
   192 0000000C 6650                <1>  push AX
   193 0000000E E8(00000000)        <1>  call proc_GetInt
   194 00000013 6689C1              <1>  mov %1,AX
   195 00000016 6658                <1>  pop AX
   196                              <1> %else
   197                              <1>  call proc_GetInt
   198                              <1> %endif
   199                                  
   200                                        PutStr  prompt_msg2   ; request second number 
   201 00000018 51                  <1>  push ECX
   202 00000019 B9[21000000]        <1>  mov ECX,%1
   203 0000001E E8(00000000)        <1>  call proc_PutStr
   204 00000023 59                  <1>  pop ECX
   205                                        GetInt DX             ; DX= second number  
   206                              <1> %ifnidni %1,AX
   207 00000024 6650                <1>  push AX
   208 00000026 E8(00000000)        <1>  call proc_GetInt
   209 0000002B 6689C2              <1>  mov %1,AX
   210 0000002E 6658                <1>  pop AX
   211                              <1> %else
   212                              <1>  call proc_GetInt
   213                              <1> %endif
   214                                   
   215 00000030 6689C8                        mov AX, CX
   216 00000033 6601D0                        add AX, DX      
   217                                        PutStr  output_msg   
   218 00000036 51                  <1>  push ECX
   219 00000037 B9[44000000]        <1>  mov ECX,%1
   220 0000003C E8(00000000)        <1>  call proc_PutStr
   221 00000041 59                  <1>  pop ECX
   222                                        PutInt  AX 
   223 00000042 6650                <1>  push AX
   224 00000044 6689C0              <1>  mov AX,%1
   225 00000047 E8(00000000)        <1>  call proc_PutInt
   226 0000004C 6658                <1>  pop AX
   227                                       
   228                                       nwln
   229 0000004E E8(00000000)        <1>  call proc_nwln
   230                                  done:
   231                                        .EXIT
   232 00000053 B801000000          <1>  mov EAX,1
   233 00000058 31DB                <1>  xor EBX,EBX
   234 0000005A CD80                <1>  int 0x80
   235                                  
   236                                  
   237                                  
   238                                  
   239                                  
   240                                  
   241                                  
   242                                  
   243                                  
