     1                                  ;Test routine for GetPut.asm     test.asm 
     2                                  ;
     3                                  ;       Objective: find the sum of two numbers 
     4                                  ;       Input: Requests the number of values to be input by the user = n
     5                                  ;       Input: Requests n integers from the user.
     6                                  ;       Output: Outputs the total sum of numbers and also the current running sum.
     7                                  
     8                                  %include "io.mac"
     9                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
    10                              <1> extern   proc_GetStr, proc_GetCh
    11                              <1> extern   proc_PutInt, proc_GetInt
    12                              <1> extern   proc_PutLInt, proc_GetLInt
    13                              <1> 
    14                              <1> ;;-------------------------------------------------------------------
    15                              <1> %macro  .STARTUP  0
    16                              <1> ;group dgroup .data .bss
    17                              <1>         global   _start
    18                              <1> _start:
    19                              <1> %endmacro
    20                              <1> ;;-------------------------------------------------------------------
    21                              <1> 
    22                              <1> 
    23                              <1> ;;-------------------------------------------------------------------
    24                              <1> %macro  .EXIT  0
    25                              <1>         mov    EAX,1
    26                              <1>         xor    EBX,EBX
    27                              <1>         int    0x80
    28                              <1> %endmacro
    29                              <1> ;;-------------------------------------------------------------------
    30                              <1> 
    31                              <1> 
    32                              <1> ;;-------------------------------------------------------------------
    33                              <1> %macro  .DATA 0
    34                              <1>         segment .data
    35                              <1> %endmacro
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> 
    38                              <1> ;;-------------------------------------------------------------------
    39                              <1> %macro  .UDATA 0
    40                              <1>         segment .bss
    41                              <1> %endmacro
    42                              <1> ;;-------------------------------------------------------------------
    43                              <1> 
    44                              <1> ;;-------------------------------------------------------------------
    45                              <1> %macro  .CODE 0
    46                              <1>         segment .data
    47                              <1>         segment .bss
    48                              <1>         segment .text
    49                              <1> %endmacro
    50                              <1> ;;-------------------------------------------------------------------
    51                              <1> 
    52                              <1> 
    53                              <1> ;;-------------------------------------------------------------------
    54                              <1> %macro  nwln  0 
    55                              <1>         call    proc_nwln
    56                              <1> %endmacro
    57                              <1> ;;-------------------------------------------------------------------
    58                              <1> 
    59                              <1> 
    60                              <1> ;;-------------------------------------------------------------------
    61                              <1> %macro  PutCh  1 
    62                              <1>         push    AX
    63                              <1>         mov     AL,%1
    64                              <1>         call    proc_PutCh
    65                              <1>         pop     AX
    66                              <1> %endmacro
    67                              <1> ;;-------------------------------------------------------------------
    68                              <1> 
    69                              <1> 
    70                              <1> ;;-------------------------------------------------------------------
    71                              <1> %macro  PutStr  1 
    72                              <1>         push    ECX
    73                              <1>         mov     ECX,%1
    74                              <1>         call    proc_PutStr
    75                              <1>         pop     ECX
    76                              <1> %endmacro
    77                              <1> ;;-------------------------------------------------------------------
    78                              <1> 
    79                              <1> 
    80                              <1> ;;-------------------------------------------------------------------
    81                              <1> %macro  GetStr  1-2 81
    82                              <1>         push    ESI
    83                              <1>         push    EDI
    84                              <1>         mov     EDI,%1
    85                              <1>         mov     ESI,%2
    86                              <1>         call    proc_GetStr
    87                              <1>         pop     EDI
    88                              <1>         pop     ESI
    89                              <1> %endmacro
    90                              <1> ;;-------------------------------------------------------------------
    91                              <1> 
    92                              <1> 
    93                              <1> ;;-------------------------------------------------------------------
    94                              <1> %macro  GetCh   1
    95                              <1>         push    SI
    96                              <1>         xor     SI,SI
    97                              <1> %ifidni %1,AL
    98                              <1>         ;inc     SI
    99                              <1>         call    proc_GetCh
   100                              <1> %elifidni %1,AH
   101                              <1>         mov     SI,1
   102                              <1>         call    proc_GetCh
   103                              <1> %else
   104                              <1>         push    AX
   105                              <1>         call    proc_GetCh
   106                              <1>         mov     %1,AL
   107                              <1>         pop     AX
   108                              <1> %endif
   109                              <1>         pop     SI
   110                              <1> %endmacro
   111                              <1> ;;-------------------------------------------------------------------
   112                              <1> 
   113                              <1> 
   114                              <1> ;;-------------------------------------------------------------------
   115                              <1> %macro  PutInt  1
   116                              <1>         push    AX
   117                              <1>         mov     AX,%1
   118                              <1>         call    proc_PutInt
   119                              <1>         pop     AX
   120                              <1> %endmacro
   121                              <1> ;;-------------------------------------------------------------------
   122                              <1> 
   123                              <1> 
   124                              <1> ;;-------------------------------------------------------------------
   125                              <1> %macro  GetInt  1
   126                              <1> %ifnidni %1,AX
   127                              <1>         push    AX
   128                              <1>         call    proc_GetInt
   129                              <1>         mov     %1,AX
   130                              <1> 	  pop     AX
   131                              <1> %else 
   132                              <1>         call  proc_GetInt
   133                              <1> %endif
   134                              <1> %endmacro
   135                              <1> ;;-------------------------------------------------------------------
   136                              <1> 
   137                              <1> ;;-------------------------------------------------------------------
   138                              <1> %macro  PutLInt  1
   139                              <1>         push    EAX
   140                              <1>         mov     EAX,%1
   141                              <1>         call    proc_PutLInt
   142                              <1>         pop     EAX
   143                              <1> %endmacro
   144                              <1> ;;-------------------------------------------------------------------
   145                              <1> 
   146                              <1> ;;-------------------------------------------------------------------
   147                              <1> %macro  GetLInt  1
   148                              <1> %ifnidni %1,EAX
   149                              <1>         push    EAX
   150                              <1>         call    proc_GetLInt
   151                              <1>         mov     %1,EAX
   152                              <1> 	  pop     EAX
   153                              <1> %else 
   154                              <1>         call  proc_GetLInt
   155                              <1> %endif
   156                              <1> %endmacro
   157                              <1> ;;-------------------------------------------------------------------
   158                              <1> 
   159                                  
   160                                  .DATA
   161                              <1>  segment .data
   162 00000000 506C6561736520696E-     prompt_msg1  db   "Please input the number of values to be summed : ",0
   163 00000009 70757420746865206E-
   164 00000012 756D626572206F6620-
   165 0000001B 76616C75657320746F-
   166 00000024 2062652073756D6D65-
   167 0000002D 64203A2000         
   168 00000032 506C6561736520696E-     prompt_msg2  db   "Please input the number : ",0
   169 0000003B 70757420746865206E-
   170 00000044 756D626572203A2000 
   171 0000004D 546865207371756172-     output_msg  db   "The square is : ",0
   172 00000056 65206973203A2000   
   173 0000005E 5468652066696E616C-     output_msg2  db   "The final sum is : ",0
   174 00000067 2073756D206973203A-
   175 00000070 2000               
   176 00000072 546865207661726961-     output_msg3  db   "The variance is : ",0
   177 0000007B 6E6365206973203A20-
   178 00000084 00                 
   179 00000085 4762                    n1          dw      25159
   180 00000087 546865207661756520-     msg_test db "The vaue inputted in n1",0
   181 00000090 696E70757474656420-
   182 00000099 696E206E3100       
   183                                  .UDATA 
   184                              <1>  segment .bss
   185 00000000 <res 00000004>          number1   resd   1 
   186 00000004 <res 00000004>          number2   resd   1
   187                                  
   188                                  .CODE
   189                              <1>  segment .data
   190                              <1>  segment .bss
   191                              <1>  segment .text
   192                                        .STARTUP
   193                              <1> 
   194                              <1>  global _start
   195                              <1> _start:
   196                                        PutStr  prompt_msg1   ; request n
   197 00000000 51                  <1>  push ECX
   198 00000001 B9[00000000]        <1>  mov ECX,%1
   199 00000006 E8(00000000)        <1>  call proc_PutStr
   200 0000000B 59                  <1>  pop ECX
   201                                        GetInt SI             ; SI= n=number of values to be summed
   202                              <1> %ifnidni %1,AX
   203 0000000C 6650                <1>  push AX
   204 0000000E E8(00000000)        <1>  call proc_GetInt
   205 00000013 6689C6              <1>  mov %1,AX
   206 00000016 6658                <1>  pop AX
   207                              <1> %else
   208                              <1>  call proc_GetInt
   209                              <1> %endif
   210 00000018 66BC0000                      mov SP, 0
   211 0000001C 66BD0000                      mov BP, 0
   212                                        loop: 
   213 00000020 6639E6                                    cmp SI, SP        
   214 00000023 7E2D                                      jle endloop 
   215                                                    PutStr  prompt_msg2   ; request number 
   216 00000025 51                  <1>  push ECX
   217 00000026 B9[32000000]        <1>  mov ECX,%1
   218 0000002B E8(00000000)        <1>  call proc_PutStr
   219 00000030 59                  <1>  pop ECX
   220                                                    GetInt DI            ; DI= number                    
   221                              <1> %ifnidni %1,AX
   222 00000031 6650                <1>  push AX
   223 00000033 E8(00000000)        <1>  call proc_GetInt
   224 00000038 6689C7              <1>  mov %1,AX
   225 0000003B 6658                <1>  pop AX
   226                              <1> %else
   227                              <1>  call proc_GetInt
   228                              <1> %endif
   229 0000003D 6601FD                                    add BP, DI  			;sum stored in BP
   230 00000040 6689F8                                    mov AX , DI  			; AX = value of number entered 
   231 00000043 66F7E7                                    mul DI 				; now AX has square of DI
   232                                  
   233                                                    ;PutStr  output_msg   
   234                                                    ;PutInt  AX
   235 00000046 6601C3                                    add BX, AX 			; BX= sum of squared numbers
   236                                                    nwln
   237 00000049 E8(00000000)        <1>  call proc_nwln
   238 0000004E 6644                                      inc SP
   239 00000050 EBCE                                      jmp loop
   240                                        endloop:
   241                                  
   242                                        PutInt BP				;sum
   243 00000052 6650                <1>  push AX
   244 00000054 6689E8              <1>  mov AX,%1
   245 00000057 E8(00000000)        <1>  call proc_PutInt
   246 0000005C 6658                <1>  pop AX
   247                                        nwln
   248 0000005E E8(00000000)        <1>  call proc_nwln
   249                                        PutInt BX				;square sum
   250 00000063 6650                <1>  push AX
   251 00000065 6689D8              <1>  mov AX,%1
   252 00000068 E8(00000000)        <1>  call proc_PutInt
   253 0000006D 6658                <1>  pop AX
   254                                        
   255                                  
   256                                        nwln 
   257 0000006F E8(00000000)        <1>  call proc_nwln
   258                                  
   259                                  
   260 00000074 6689C1                        mov CX,AX   			; CX has sq sum/ n)
   261                                        PutInt CX
   262 00000077 6650                <1>  push AX
   263 00000079 6689C8              <1>  mov AX,%1
   264 0000007C E8(00000000)        <1>  call proc_PutInt
   265 00000081 6658                <1>  pop AX
   266                                        nwln
   267 00000083 E8(00000000)        <1>  call proc_nwln
   268 00000088 6689E8                        mov AX,BP				; AX has sum
   269                                        PutInt AX
   270 0000008B 6650                <1>  push AX
   271 0000008D 6689C0              <1>  mov AX,%1
   272 00000090 E8(00000000)        <1>  call proc_PutInt
   273 00000095 6658                <1>  pop AX
   274                                        nwln
   275 00000097 E8(00000000)        <1>  call proc_nwln
   276                                        PutInt SI
   277 0000009C 6650                <1>  push AX
   278 0000009E 6689F0              <1>  mov AX,%1
   279 000000A1 E8(00000000)        <1>  call proc_PutInt
   280 000000A6 6658                <1>  pop AX
   281 000000A8 66F7F6                        div SI				; AX is mean
   282                                        
   283 000000AB 66F7E0                        MUL AX
   284 000000AE 6689C4                        MOV SP,AX
   285                                        PutInt SP
   286 000000B1 6650                <1>  push AX
   287 000000B3 6689E0              <1>  mov AX,%1
   288 000000B6 E8(00000000)        <1>  call proc_PutInt
   289 000000BB 6658                <1>  pop AX
   290                                  
   291                                  
   292 000000BD 6689D8                        mov AX,BX						
   293 000000C0 66F7F6                        div SI				
   294                                  
   295                                  
   296                                        PutInt AX
   297 000000C3 6650                <1>  push AX
   298 000000C5 6689C0              <1>  mov AX,%1
   299 000000C8 E8(00000000)        <1>  call proc_PutInt
   300 000000CD 6658                <1>  pop AX
   301                                  
   302                                  
   303                                  
   304                                  
   305                                  
   306                                  
   307 000000CF 6629E0                        sub AX, SP 
   308                                        nwln  
   309 000000D2 E8(00000000)        <1>  call proc_nwln
   310                                        ;PutStr output_msg3
   311                                        PutInt AX
   312 000000D7 6650                <1>  push AX
   313 000000D9 6689C0              <1>  mov AX,%1
   314 000000DC E8(00000000)        <1>  call proc_PutInt
   315 000000E1 6658                <1>  pop AX
   316                                  
   317                                        nwln
   318 000000E3 E8(00000000)        <1>  call proc_nwln
   319                                  done:
   320                                        .EXIT
   321 000000E8 B801000000          <1>  mov EAX,1
   322 000000ED 31DB                <1>  xor EBX,EBX
   323 000000EF CD80                <1>  int 0x80
